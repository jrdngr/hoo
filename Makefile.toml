[env]
# all workspace members can use this Makefile
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = "true"
PORT = "8080"

[tasks.compile_server]
description = "Compile hoo server"
workspace = false
command = "cargo"
args = ["build", "--bin", "hoo_server"]

[tasks.build_server]
description = "Build hoo server"
workspace = false
dependencies = ["build_frontend", "compile_server"]

[tasks.run_server]
description = "Cargo run hoo server"
workspace = false
command = "cargo"
args = ["run", "--bin", "hoo_server"]

[tasks.run]
description = "Run hoo server"
workspace = false
dependencies = ["build_frontend", "run_server"]

# ---- BUILD & CREATE WASMS ----
[tasks.compile_frontend]
description = "Build"
cwd = "./hoo_frontend"
workspace = false
command = "cargo"
args = ["build"]

[tasks.compile_frontend_release]
description = "Build, with the --release flag"
cwd = "./hoo_frontend"
workspace = false
command = "cargo"
args = ["build"]

[tasks.create_wasm]
description = "Build with wasm-pack"
install_crate = { crate_name = "wasm-pack", binary = "wasm-pack", test_arg = "-V", min_version = "0.8.0" }
command = "wasm-pack"
args = ["build", "./hoo_frontend", "--target", "web", "--out-dir", "dist/pkg", "--out-name", "package", "--dev", "--no-typescript"]

[tasks.create_wasm_release]
description = "Build with wasm-pack"
install_crate = { crate_name = "wasm-pack", binary = "wasm-pack", test_arg = "-V", min_version = "0.8.0" }
command = "wasm-pack"
args = ["build", "./hoo_frontend", "--target", "web", "--out-dir", "dist/pkg", "--out-name", "package", "--no-typescript"]

[tasks.build_frontend]
description = "Build, and create wasms"
workspace = false
dependencies = ["compile_frontend", "create_wasm"]

[tasks.build_release]
description = "Build, and create wasms, with the release flag"
workspace = false
dependencies = ["compile_frontend_release", "create_wasm_release"]

[tasks.watch]
description = "Build, create wasms, and watch/recompile files for changes"
workspace = false
dependencies = ["build_frontend", "create_wasm"]
watch = { ignore_pattern="pkg/*" }

[tasks.serve]
description = "Start server"
install_crate = { crate_name = "microserver", binary = "microserver", test_arg = "-h" }
workspace = false
command = "microserver"
args = ["./dist", "--port", "${PORT}"]

[tasks.start]
description = "Combine the build and serve tasks"
workspace = false
dependencies = ["build_frontend", "serve"]


# ---- LINT ----

[tasks.clippy]
description = "Lint with Clippy"
clear = true
workspace = false
install_crate = { rustup_component_name = "clippy", binary = "cargo-clippy", test_arg = "--help" }
command = "cargo"
args = ["clippy", "--all-features", "--", "--deny", "warnings", "--deny", "clippy::pedantic", "--deny", "clippy::nursery"]

[tasks.fmt]
description = "Format with rustfmt"
workspace = false
dependencies = ["fmt"]


# ---- TEST ----

[tasks.test]
description = "Run tests. Ex: 'cargo make test firefox'. Test envs: [chrome, firefox, safari]"
clear = true
workspace = false
install_crate = { crate_name = "wasm-pack", binary = "wasm-pack", test_arg = "-V", min_version = "0.8.0" }
command = "wasm-pack"
args = ["test", "--${@}"]

[tasks.test_release]
extend = "test"
description = "Run tests in release mode. Ex: 'cargo make test firefox'. Test envs: [chrome, firefox, safari]"
args = ["test", "--${@}", "--release"]

[tasks.test_h]
description = "Run headless tests. Ex: 'cargo make test_h firefox'. Test envs: [chrome, firefox, safari]"
extend = "test"
args = ["test", "--headless", "--${@}"]

[tasks.test_h_release]
extend = "test_h"
description = "Run headless tests in release mode. Ex: 'cargo make test_h firefox'. Test envs: [chrome, firefox, safari]"
args = ["test", "--headless", "--${@}", "--release"]
